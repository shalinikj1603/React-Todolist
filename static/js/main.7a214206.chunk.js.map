{"version":3,"sources":["components/ListItems.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","Todolist","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","console","log","newItems","filteredItems","filter","bind","this","onSubmit","placeholder","Component","library","add","faTrash","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAmCeA,MA9Bf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEzB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACzC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAC7CC,SACI,SAACC,GACEZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAI7C,8BAEA,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,QAAS,WAC1Cf,EAAMgB,WAAWZ,EAAKE,MACvBW,KAAK,gBAKZ,OAAO,6BACH,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC/BlB,KCoEMmB,E,kDA7FX,WAAYpB,GAAQ,IAAD,8BACf,cAAMA,IAeVqB,YAAc,SAACT,GACX,EAAKU,SAAS,CACVC,YAAY,CACRb,KAAME,EAAEE,OAAOL,MACfH,IAAIkB,KAAKC,UApBF,EAyBnBC,QAAS,SAACd,GACNA,EAAEe,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAE3B,GADAO,QAAQC,IAAIH,GACM,KAAfA,EAAQlB,KAAU,CACjB,IAAMsB,EAAS,GAAD,mBAAK,EAAKH,MAAM3B,OAAhB,CAAsB0B,IACpC,EAAKN,SAAS,CACVpB,MAAM8B,EACNT,YAAY,CACRb,KAAK,GACLJ,IAAI,QAnCD,EAyCnBU,WAAY,SAACV,GACT,IAAM2B,EAAgB,EAAKJ,MAAM3B,MAAMgC,QAAO,SAAA9B,GAAI,OAC9CA,EAAKE,MAAMA,KACX,EAAKgB,SAAS,CACVpB,MAAM+B,KA1Cd,EAAKJ,MAAQ,CACR3B,MAAM,GACNqB,YAAY,CACRb,KAAK,GACLJ,IAAI,KAGb,EAAKe,YAAc,EAAKA,YAAYc,KAAjB,gBACnB,EAAKT,QAAU,EAAKA,QAAQS,KAAb,gBACf,EAAKnB,WAAW,EAAKA,WAAWmB,KAAhB,gBAChB,EAAKtB,UAAY,EAAKA,UAAUsB,KAAf,gBAbF,E,sDA+DTzB,EAAKJ,GACX,IAAMJ,EAAQkC,KAAKP,MAAM3B,MACzBA,EAAMC,KAAI,SAAAC,GACHA,EAAKE,MAAQA,IACXF,EAAKM,KAAKA,MAGnB0B,KAAKd,SAAS,CACVpB,MAAOA,M,+BAKX,OACI,yBAAKG,UAAU,OACf,gCACI,0BAAMG,GAAG,aAAa6B,SAAUD,KAAKV,SACjC,2BAAOnB,KAAK,OAAO+B,YAAY,aAC/B7B,MAAO2B,KAAKP,MAAMN,YAAYb,KAC9BC,SAAUyB,KAAKf,cACf,4BAAQd,KAAK,UAAb,QAER,kBAAC,EAAD,CAAWL,MAAOkC,KAAKP,MAAM3B,MAC7Bc,WAAYoB,KAAKpB,WAAYH,UAAWuB,KAAKvB,kB,GAvFlC0B,a,eCGvBC,IAAQC,IAAIC,KAUGC,MARf,WACE,OACE,6BACD,kBAAC,EAAD,QCCiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.7a214206.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItems.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n   {\r\n       return <div className=\"list\" key={item.key}>\r\n     <p>\r\n         <input type=\"text\" id={item.key} value={item.text} \r\n         onChange = {\r\n             (e) => {\r\n                props.setUpdate(e.target.value, item.key)\r\n             }\r\n         }\r\n        />\r\n        <span>\r\n       \r\n        <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n            props.deleteItem(item.key)\r\n        }} icon=\"trash\" />\r\n        </span>\r\n     </p>\r\n     \r\n    </div>})\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n    \r\n    </div>;\r\n}\r\n\r\nexport default ListItems\r\n","import React, { Component } from 'react'\r\nimport ListItems from './ListItems';\r\n\r\nclass Todolist extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             items:[],\r\n             currentItem:{\r\n                 text:'',\r\n                 key:''\r\n             }\r\n        }\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.deleteItem=this.deleteItem.bind(this);\r\n        this.setUpdate = this.setUpdate.bind(this);\r\n    }\r\n\r\n    handleInput = (e) =>{\r\n        this.setState({\r\n            currentItem:{\r\n                text: e.target.value,\r\n                key:Date.now()\r\n            }\r\n        })\r\n    }\r\n\r\n    addItem =(e) =>{\r\n        e.preventDefault();\r\n        const newItem = this.state.currentItem;\r\n        console.log(newItem);\r\n        if(newItem.text!==\"\"){\r\n            const newItems=[...this.state.items,newItem];\r\n            this.setState({\r\n                items:newItems,\r\n                currentItem:{\r\n                    text:'',\r\n                    key:''\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteItem =(key) =>{\r\n        const filteredItems = this.state.items.filter(item =>\r\n            item.key!==key);\r\n            this.setState({\r\n                items:filteredItems\r\n            })\r\n    }\r\n\r\n    // setUpdate(text,key){\r\n    //     console.log(\"items:\"+this.state.items);\r\n    //     const items = this.state.items;\r\n    //     items.map(item=>{      \r\n    //       if(item.key===key){\r\n    //         console.log(item.key +\"    \"+key)\r\n    //         item.text= text;\r\n    //       }\r\n    //     })\r\n    //     this.setState({\r\n    //       items: items\r\n    //     })\r\n    //   }\r\n\r\n    setUpdate(text,key){\r\n        const items = this.state.items;\r\n        items.map(item =>{\r\n            if(item.key === key){\r\n                 item.text=text;\r\n            }\r\n        })\r\n        this.setState({\r\n            items: items\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n            <header>\r\n                <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n                    <input type=\"text\" placeholder=\"Enter text\"\r\n                    value={this.state.currentItem.text}\r\n                    onChange={this.handleInput}></input>\r\n                    <button type=\"submit\">Add</button>\r\n                </form>\r\n            <ListItems items={this.state.items}\r\n            deleteItem={this.deleteItem} setUpdate={this.setUpdate} ></ListItems>\r\n             </header>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todolist\r\n","import React from 'react';\nimport './App.css';\nimport Todolist from './components/Todolist';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash)\n\nfunction App() {\n  return (\n    <div>\n   <Todolist></Todolist>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}